spring.application.name=order-service
server.port=8082
server.shutdown=graceful

######## Order Service Configuration  #########
orders.catalog-service-url=http://localhost:8081
orders.order-events-exchange=orders-exchange
orders.new-orders-queue=new-orders
orders.delivered-orders-queue=delivered-orders
orders.cancelled-orders-queue=cancelled-orders
orders.error-orders-queue=error-orders

orders.publish-order-events-job-cron=*/5 * * * * *
orders.new-orders-job-cron=*/10 * * * * *

######## Actuator Configuration  #########
management.info.git.mode=full
management.endpoints.web.exposure.include=*
#management.metrics.tags.application=${spring.application.name}
#management.tracing.enabled=false
#management.tracing.sampling.probability=1.0

######### Swagger Configuration  #########
#swagger.api-gateway-url=http://localhost:8989/orders

####### OAuth2 Configuration  #########
#OAUTH2_SERVER_URL=http://localhost:9191
#REALM_URL=${OAUTH2_SERVER_URL}/realms/bookstore
#spring.security.oauth2.resourceserver.jwt.issuer-uri=${REALM_URL}

######## Database Configuration  #########
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:25432/postgres}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}
spring.jpa.open-in-view=false
spring.jpa.show-sql=true

######## RabbitMQ Configuration  #########
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}

## instead of default config like retry 3 times and wait for 500ms
## let configure our own behavior retry for 2 times and wait for 1 sec
## Resilience4j Configuration
resilience4j.retry.backends.catalog-service.max-attempts=2
resilience4j.retry.backends.catalog-service.wait-duration=1s

### for demonstration purpose we are setting very lows values
### If the sliding window is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated.
resilience4j.circuitbreaker.backends.catalog-service.sliding-window-type=COUNT_BASED
#### Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
resilience4j.circuitbreaker.backends.catalog-service.sliding-window-size=6
### Configures the minimum number of calls which are required
resilience4j.circuitbreaker.backends.catalog-service.minimum-number-of-calls=4
### CircuitBreaker could stay in Half Open state, before it switches to open.
resilience4j.circuitbreaker.backends.catalog-service.wait-duration-in-open-state=20s
### Configures the number of permitted calls when the CircuitBreaker is half open.
resilience4j.circuitbreaker.backends.catalog-service.permitted-number-of-calls-in-half-open-state=2
#### Once the circuit breaker transitions from open to half-open,this failure rate is used to decide whether the circuit is good to be closed again
resilience4j.circuitbreaker.backends.catalog-service.failure-rate-threshold=50
